#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re
import sys
import subprocess

class colors:
    OFF     = '\033[0;0m'
    BOLD    = '\033[0;1m'
    BLACK   = '\033[0;30m'
    RED     = '\033[0;31m'
    GREEN   = '\033[0;32m'
    YELLOW  = '\033[0;33m'
    BLUE    = '\033[0;34m'
    MAGENTA = '\033[0;35m'
    CYAN    = '\033[0;36m'
    WHITE   = '\033[0;37m'

def colorsoff():
    colors.OFF     = ''
    colors.BOLD    = ''
    colors.BLACK   = ''
    colors.RED     = ''
    colors.GREEN   = ''
    colors.YELLOW  = ''
    colors.BLUE    = ''
    colors.MAGENTA = ''
    colors.CYAN    = ''
    colors.WHITE   = ''

# Support python 2.7.6
args = []
for arg in sys.argv:
    args += arg.split()

child = subprocess.Popen(args[1:], stdout=subprocess.PIPE, text=True)
(out, err) = child.communicate()
if child.returncode != 0:
    if out:
        sys.stdout.write(out)
    sys.exit(child.returncode)

# Turn off colors if stdout is being piped or redirected
if not sys.stdout.isatty():
    colorsoff()

move = []
for line in out.split('\n'):
    m = re.match(r'(.+) - moved from (.+)', line)
    if m:
        move.append(m.groups())
    elif line:
        print(line)

if move:
    print('\nOpened for move')
    for (mvto, mvfrom) in move:
        print('\t{}{}{} -> {}{}{}'.format(colors.RED, mvfrom, colors.OFF, colors.GREEN, mvto, colors.OFF))
    print('')

sys.exit(child.returncode)
