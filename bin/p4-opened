#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re
import sys
import subprocess

class colors:
    OFF     = '\033[0;0m'
    BOLD    = '\033[0;1m'
    BLACK   = '\033[0;30m'
    RED     = '\033[0;31m'
    GREEN   = '\033[0;32m'
    YELLOW  = '\033[0;33m'
    BLUE    = '\033[0;34m'
    MAGENTA = '\033[0;35m'
    CYAN    = '\033[0;36m'
    WHITE   = '\033[0;37m'

def colorsoff():
    colors.OFF     = ''
    colors.BOLD    = ''
    colors.BLACK   = ''
    colors.RED     = ''
    colors.GREEN   = ''
    colors.YELLOW  = ''
    colors.BLUE    = ''
    colors.MAGENTA = ''
    colors.CYAN    = ''
    colors.WHITE   = ''

class p4file():
    def __init__(self, name, stat, type):
        self.name = name
        self.stat = stat
        self.type = type

# Support python 2.7.6
args = []
for arg in sys.argv:
    args += arg.split()

child = subprocess.Popen(args[1:], stdout=subprocess.PIPE, text=True)
(out, err) = child.communicate()
if child.returncode != 0:
    if out:
        sys.stdout.write(out)
    sys.exit(child.returncode)

# Turn off colors if stdout is being piped or redirected
if not sys.stdout.isatty():
    colorsoff()

changes = {}
for line in out.split('\n'):
    m = re.match(r'(.+) - (.+) (default change|change ([0-9]+)) (.+)', line)
    if m:
        cl = m.group(4) if m.group(4) else 'default'
        if cl not in changes:
            changes[cl] = []
        changes[cl].append(p4file(name=m.group(1), stat=m.group(2), type=m.group(5)))
    elif line:
        print(line)

if changes:
    for cl, files in changes.items():
        print('\n{}[ {} ]{}'.format(colors.BOLD, cl, colors.OFF))
        statlen = 0
        namelen = 0
        for f in files:
            statlen = max(statlen, len(f.stat))
            namelen = max(namelen, len(f.name))
        for f in files:
            color = colors.OFF
            if 'edit' in f.stat:
                color = colors.YELLOW
            elif 'add' in f.stat:
                color = colors.GREEN
            elif 'delete' in f.stat:
                color = colors.RED
            elif 'branch' in f.stat:
                color = colors.MAGENTA
            elif 'integrate' in f.stat:
                color = colors.CYAN
            print('\t{}{: <{statlen}} {: <{namelen}}{} {}'.format(color, f.stat, f.name, colors.OFF, f.type, statlen=statlen, namelen=namelen))
    print('')

sys.exit(child.returncode)
